// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package ip_set

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if len(a.ko.Spec.Addresses) != len(b.ko.Spec.Addresses) {
		delta.Add("Spec.Addresses", a.ko.Spec.Addresses, b.ko.Spec.Addresses)
	} else if len(a.ko.Spec.Addresses) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.Addresses, b.ko.Spec.Addresses) {
			delta.Add("Spec.Addresses", a.ko.Spec.Addresses, b.ko.Spec.Addresses)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Description, b.ko.Spec.Description) {
		delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
	} else if a.ko.Spec.Description != nil && b.ko.Spec.Description != nil {
		if *a.ko.Spec.Description != *b.ko.Spec.Description {
			delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.IPAddressVersion, b.ko.Spec.IPAddressVersion) {
		delta.Add("Spec.IPAddressVersion", a.ko.Spec.IPAddressVersion, b.ko.Spec.IPAddressVersion)
	} else if a.ko.Spec.IPAddressVersion != nil && b.ko.Spec.IPAddressVersion != nil {
		if *a.ko.Spec.IPAddressVersion != *b.ko.Spec.IPAddressVersion {
			delta.Add("Spec.IPAddressVersion", a.ko.Spec.IPAddressVersion, b.ko.Spec.IPAddressVersion)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Scope, b.ko.Spec.Scope) {
		delta.Add("Spec.Scope", a.ko.Spec.Scope, b.ko.Spec.Scope)
	} else if a.ko.Spec.Scope != nil && b.ko.Spec.Scope != nil {
		if *a.ko.Spec.Scope != *b.ko.Spec.Scope {
			delta.Add("Spec.Scope", a.ko.Spec.Scope, b.ko.Spec.Scope)
		}
	}

	return delta
}
